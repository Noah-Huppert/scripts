#!/usr/bin/env bash
#?
# Virtual DNS - A tool which modifies your `/etc/hosts` file to give you local 
#               domains for quick development.  
#
# USAGE

#	virtual-dns COMMAND [OPTIONS] CMD_ARGS...
#
# COMMANDS
#
#    init                 Creates state directory at $HOME/.config/virtual-dns and
#                         backs up /etc/host file
#
#    update               Updates system's /etc/hosts file entries
#
#    ls                   List local domains
#
#    set DOMAIN TARGET    Makes a local domain which points to TARGET
#
#    rm DOMAIN            Removes domain
#
# OPTIONS
#
#	--help,-h    Display help text
#
# EXAMPLES
#
#    Create a virtual domain named "example-domain.local" which points to 127.0.0.1
#
#        virtual-dns set example-domain.local 127.0.0.1
#
# BEHAVIOR
#
#    Modifies the `/etc/hosts` file to provide custom virtual DNS names.
#
#    Note, some browsers automatically direct .dev top level domains to https.
#
#?

# to-length makes the provided string a certain length
function to-length { # (txt, length [,spacer])
    if [[ -z "$1" ]]; then
	   return "Error: first argument, txt, not provided"
    fi
    txt="$1"

    if [[ -z "$2" ]]; then
	   return "Error: second argument, length, not provided"
    fi
    length="$2"

    if [[ ! -z "$3" ]]; then
	   spacer="$3"
    else
	   spacer=" "
    fi

    # Loop till length
    while (( $(echo "$txt" | wc -m) < "$length" )); do
	   txt="$txt$spacer"
    done

    echo "$txt"
}

function bold() {
    echo "$(tput bold)$@$(tput sgr0)"
}

function run() {	
    # Creates XDG dir
    confDir="$HOME/.config/virtual-dns"
    mkdir -p "$confDir"

    domainsDir="$confDir/domains"
    mkdir -p "$domainsDir"

    # Vars
    hostsOriginal="$confDir/hosts.original"

    # Check help arg
    if [[ ( "$#" == 0 ) || "$1" =~ ^(--help|-h)$ ]]; then
	   show-help "$0"
	   exit 1
    fi

    # Check command
    if [[ -z "$1" ]]; then
	   echo "Error: first argument, command, not provided"
	   exit 1
    fi
    cmd="$1"


    # Run
    if [[ ( ("$cmd" != "ls" ) && ( "$cmd" != "init" ) ) && ( $EUID -ne 0 ) ]]; then
	   echo "Need to run as sudo, automatically relaunching"
	   sudo -E "$0" "$@"
	   return
    fi

    # Run command
    if [[ "$cmd" == "init" ]]; then
	   #
	   # Init command
	   #

	   # Copy current hosts
	   cp /etc/hosts "$hostsOriginal"

	   echo "Success"
    elif [[ "$cmd" == "ls" ]]; then
	   #
	   # List command
	   #
	   bold "Domains"
	   echo ""

	   # Longest values
	   longestKey=3
	   longestVal=5
	   while read path; do
		  # check not dir
		  if [[ -d "$path" ]]; then 
			 continue
		  fi

		  # Filename
		  filename=$(basename "$path")

		  # key length
		  length=$(echo $filename | wc -m)
		  if (( "$length" > "$longestKey" )); then
			 longestKey="$length"
		  fi

		  # val length
		  length=$(cat $path | wc -m)
		  if (( "$length" > "$longestVal" )); then
			 longestVal="$length"
		  fi
	   done <<< "$(find "$domainsDir" -type f)"

	   # Header
	   bold "$(to-length Key $longestKey)   $(to-length Value $longestVal)"

	   # List
	   if [ -n "$(find "$domainsDir" -type f)" ]; then
		  while read path; do
			 # print
			 filename=$(basename "$path")
			 echo "$(to-length $filename $longestKey)   $(to-length $(cat $path) $longestVal)"
		  done <<< "$(find "$domainsDir" -type f)"
	   fi
    elif [[ "$cmd" == "update" ]]; then
	   # 
	   # Update command
	   #

	   # Check initialized
	   if [[ ! -f "$hostsOriginal" ]]; then
		  echo "Error: File \"$hostsOriginal\" does not exists, run the init command"
		  exit 1
	   fi

	   # Backup current
	   cp /etc/hosts "$confDir/hosts.bak"

	   # Overwrite with original hosts
	   cat "$hostsOriginal" > /etc/hosts

	   # Add custom domains
	   echo "# Virtual DNS (auto generated) - start" >> /etc/hosts

	   if [ -n "$(find "$domainsDir" -type f)" ]; then
		  while read path; do
			 key=$(basename "$path")
			 val=$(cat "$path")

			 echo "$val    $key" >> /etc/hosts
		  done <<< "$(find "$domainsDir" -type f)"
	   fi

	   echo "# Virtual DNS (auto generated) - end" >> /etc/hosts

	   echo "Success"
    elif [[ "$cmd" == "set" ]]; then
	   #
	   # Set command
	   #

	   # Check key
	   if [[ -z "$2" ]]; then
		  echo "Error: second argument, key, not provided"
		  exit 1
	   fi
	   key="$2"

	   # Check value
	   if [[ -z "$3" ]]; then
		  echo "Error: third argument, value, not provided"
		  exit 1
	   fi
	   val="$3"

	   # Set
	   echo "$val" > "$domainsDir/$key"

	   # Update
	   run update
    elif [[ "$cmd" == "rm" ]]; then
	   #
	   # Remove command
	   #

	   # Check key
	   if [[ -z "$2" ]]; then
		  echo "Error: second argument, key, not provided"
		  exit 1
	   fi
	   key="$2"

	   # Check exists
	   if [[ ! -f "$domainsDir/$key" ]]; then
		  echo "Error: no entry for key \"$key\""
		  exit 1
	   fi

	   # Confirm
	   confirmIn="NOT$key"

	   while [[ "$confirmIn" != "$key" ]]; do
		  echo "WARNING: Deleting \"$key\""
		  echo "         Type: \"$key\" (without quotes) to continue"

		  read confirmIn
	   done
	   
	   # Remove
	   rm "$domainsDir/$key"

	   # Update
	   run update
    fi
}

run "$@"
