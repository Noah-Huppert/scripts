#!/usr/bin/env bash
# 
# Noah Huppert - 11/12/17
# 
#?
# A tool which modifies your `/etc/hosts` file to give you local domains for 
# quick development.  
#
# COMMANDS
#
# init
#
#     Creates the `$HOME/.config/local-dns` directory and copies your current 
#      `/etc/hosts` to this location
#
# update
#
#     Updates the system's /etc/hosts file with entries
#
# ls
#
#     Lists domains
#
# set KEY VAL
#
#     Sets the `KEY` subdomain to point to the provided `VAL`
#
# rm KEY
#
#     Removes the provided `KEY`
#?

# to-length makes the provided string a certain length
function to-length { # (txt, length [,spacer])
	if [[ -z "$1" ]]; then
		return "Error: first argument, txt, not provided"
	fi
	txt="$1"

	if [[ -z "$2" ]]; then
		return "Error: second argument, length, not provided"
	fi
	length="$2"

	if [[ ! -z "$3" ]]; then
		spacer="$3"
	else
		spacer=" "
	fi

	# Loop till length
	while (( $(echo "$txt" | wc -m) < "$length" )); do
		txt="$txt$spacer"
	done

	echo "$txt" 
 }

function run() {	
	# Creates XDG dir
	confDir="$HOME/.config/local-dns"
	mkdir -p "$confDir"

	domainsDir="$confDir/domains"
	mkdir -p "$domainsDir"

	# Vars
	hostsOriginal="$confDir/hosts.original"

	# Check help arg
	if [[ ( "$#" == 0 ) || ( "$1" == "--help" ) ]]; then
		show-help -s local-dns
	fi

	# Check command
	if [[ -z "$1" ]]; then
		echo "Error: first argument, command, not provided"
		exit 1
	fi
	cmd="$1"


	# Run
	if [[ ( ("$cmd" != "ls" ) && ( "$cmd" != "init" ) ) && ( $EUID -ne 0 ) ]]; then
		echo "Need to run as sudo, automatically relaunching"
		sudo -E "$0" "$@"
		return
	fi

	# Run command
	if [[ "$cmd" == "init" ]]; then
		#
		# Init command
		#

		# Copy current hosts
		cp /etc/hosts "$hostsOriginal"

		echo "Success"
	elif [[ "$cmd" == "ls" ]]; then
		#
		# List command
		#
		echo "Domains:"
		echo ""

		# Longest values
		longestKey=3
		longestVal=5
		while read path; do
			# check not dir
			if [[ -d "$path" ]]; then 
				continue
			fi

			# Filename
			filename=$(basename "$path")

			# key length
			length=$(echo $filename | wc -m)
			if (( "$length" > "$longestKey" )); then
				longestKey="$length"
			fi

			# val length
			length=$(cat $path | wc -m)
			if (( "$length" > "$longestVal" )); then
				longestVal="$length"
			fi
		done <<< "$(find "$domainsDir" -type f)"

		# Header
		echo "| $(to-length Key $longestKey) | $(to-length Value $longestVal) |"
		echo "| $(to-length - $longestKey -) | $(to-length - $longestVal -) |"

		# List
		while read path; do
			# print
			filename=$(basename "$path")
			echo "| $(to-length $filename $longestKey) | $(to-length $(cat $path) $longestVal) |"
		done <<< "$(find "$domainsDir" -type f)"
	elif [[ "$cmd" == "update" ]]; then
		# 
		# Update command
		#

		# Check initialized
		if [[ ! -f "$hostsOriginal" ]]; then
			echo "Error: File \"$hostsOriginal\" does not exists, run the init command"
			exit 1
		fi

		# Backup current
		cp /etc/hosts "$confDir/hosts.bak"

		# Overwrite with original hosts
		cat "$hostsOriginal" > /etc/hosts

		# Add custom domains
		echo "# Local DNS (auto generated) - start" >> /etc/hosts
		
		while read path; do
			key=$(basename "$path")
			val=$(cat "$path")

			echo "$val    $key" >> /etc/hosts
		done <<< "$(find "$domainsDir" -type f)"

		echo "# Local DNS (auto generated) - end" >> /etc/hosts

		echo "Success"
	elif [[ "$cmd" == "set" ]]; then
		#
		# Set command
		#

		# Check key
		if [[ -z "$2" ]]; then
			echo "Error: second argument, key, not provided"
			exit 1
		fi
		key="$2"

		# Check value
		if [[ -z "$3" ]]; then
			echo "Error: third argument, value, not provided"
			exit 1
		fi
		val="$3"

		# Set
		echo "$val" > "$domainsDir/$key"

		# Update
		run update
	elif [[ "$cmd" == "rm" ]]; then
		#
		# Remove command
		#

		# Check key
		if [[ -z "$2" ]]; then
			echo "Error: second argument, key, not provided"
			exit 1
		fi
		key="$2"

		# Check exists
		if [[ ! -f "$domainsDir/$key" ]]; then
			echo "Error: no entry for key \"$key\""
			exit 1
		fi

		# Confirm
		confirmIn="NOT$key"

		while [[ "$confirmIn" != "$key" ]]; do
			echo "WARNING: Deleting \"$key\""
			echo "         Type: \"$key\" (without quotes) to continue"

			read confirmIn
		done
		
		# Remove
		rm "$domainsDir/$key"

		# Update
		run update
	fi
}

run "$@"
